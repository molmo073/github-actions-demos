name: CI - Split

on:
  push:
    branches: [main]
    paths: ["hangman-api/**"]
  pull_request:
    branches: [main]
    paths: ["hangman-api/**"]
jobs:
  build:   # primer job llamado build
    runs-on: ubuntu-latest
    steps:                                
    - name: Checkout-build
      uses: actions/checkout@v4       # Clona el repositorio actual (el mismo donde está definido el workflow) en el runner (máquina virtual que ejecuta el job).      
    - name: Setup Node.js node-version
      uses: actions/setup-node@v4     # Instala y configura la versión especificada de Node.js (en este caso, la versión 20) en el runner.    
      with:
        node-version: 20
    - name: build
      working-directory: ./hangman-api
      run: |
        npm ci                           
        npm run build --if-present       

  test:   # segundo job llamado test
    needs: build      # hace que este job dependa de la correcta ejecucion del primer job build.
    runs-on: ubuntu-latest
    steps:
    - name: Checkout-test
      uses: actions/checkout@v4
    - name: test
      working-directory: ./hangman-api
      run: |
        npm ci                           
        npm test      

  audit:  # tercer job llamado test
    # if: ${{ always() }} # se ejecutaría siempre el jobs audit, independientemente de que build y test se ejecutaran ok.
    # needs: [test, build]  # se ejecuta si los primeros jobs test y build se ejecutan correctamente.
    needs: test     # hace que este job dependa de la correcta ejecucion del segundo job test.
    runs-on: ubuntu-latest
    steps:
      - name: Audit
        run: java --version