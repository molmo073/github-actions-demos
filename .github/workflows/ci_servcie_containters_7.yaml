name: CI - service containers
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths: ["hangman-api/**"]
  pull_request:
    branches: [main]
    paths: ["hangman-api/**"]

jobs:
  build:   # primer job llamado build
    runs-on: ubuntu-latest
    steps:                                
    - name: Checkout-build
      uses: actions/checkout@v4           
    - name: Setup Node.js node-version
      uses: actions/setup-node@v4       
      with:
        node-version: 16
        cache: 'npm'
        cache-dependency-path: hangman-api/package-lock.json
    - name: build
      working-directory: ./hangman-api
      run: |
        npm ci                           
        npm run build --if-present

  test:   # segundo job llamado test
    needs: build  
    runs-on: ubuntu-latest
    steps:
    - name: Checkout-test
      uses: actions/checkout@v4
    - name: Setup Node.js node-version
      uses: actions/setup-node@v4       
      with:
        node-version: 16
    - name: test
      working-directory: ./hangman-api
      run: |
        ls -la
        npm ci
        npm test
  
  integration-tests:
    runs-on: ubuntu-latest
    services:   # vamos a declarar en esta sección la base de datos
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hangman_db
        options:    #opciones para que espere que la base de datos esté levantada
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4       # Clonamos el repositorio en el runner
      - name: Setup Node.js node-version
        uses: actions/setup-node@v4     # configurar la version de node
        with:
          node-version: 16
      - name: Create database relationships
        working-directory: ./hangman-api
        env:
          DATABASE_PORT: 5432
          DATABASE_HOST: localhost
          DATABASE_NAME: hangman_db
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_POOL_MIN: 2
          DATABASE_POOL_MAX: 10
        run: |
          npm ci
          npx knex migrate:latest --env development
      # - name: integration-tests
      #   working-directory: ./hangman-api
      #   run: docker compose -f ./hangman-api/test-integration.yaml up --force-recreate --exit-code-from build-db-relationships

